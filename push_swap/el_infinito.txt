	printf ("STACK 1 = %i\n", push->stack1);
	printf ("STACK 2 = %i\n", push->stack2);
	printf ("STACK 3 = %i\n", push->stack3);
	printf ("STACK 4 = %i\n", push->stack4);
	printf ("STACK 5 = %i\n", push->stack5);
	printf ("STACK 6 = %i\n", push->stack6);
	printf ("STACK 7 = %i\n", push->stack7);
	printf ("STACK MAX = %i\n", push->max);
	printf ("STACK MIN = %i\n", push->min);

	printf ("AUX_AUX 1 = %i\n", aux_aux);

int	b_to_a_splitter(t_list **sta, t_list **stb, t_list **result, int aux_aux)
{
	t_list	*tempb;
	int		cla;
	int		mid;

	tempb = *stb;
	aux_aux = 0;
	mid = (ft_lstsize(tempb) / 2);
	cla = cla_mid_finder(stb, ft_lstsize(tempb));
	while (ft_lstsize(tempb) > mid)
	{
		tempb = *stb;
		if ((int)tempb->content == min_num_finder(stb))
		{
			psw_pa(sta, stb, result);
			psw_ra(sta, result);
			aux_aux++;
		}
		if ((int)tempb->content > cla)
			psw_pa(sta, stb, result);
		else
			psw_rb(stb, result);
		tempb = *stb;
	}
	return (aux_aux);
}

int	cla_mid_finder(t_list	**sta, int a)
{
	t_list	*temp;
	int		i;
	int		min;
	int		cla;

	i = 0;
	min = min_num_finder(sta);
	cla = next_min_num(sta, min);
	while (i < ((a / 2) - 2))
	{
		cla = next_min_num(sta, cla);
		i++;
	}
	return (cla);
}

int	cla_next_finder(t_list	**sta, int a)
{
	t_list	*temp;
	int		i;
	int		min;
	int		cla;

	i = 0;
	min = min_num_finder_algo(sta, a);
	cla = next_min_num_algo(sta, min, a);
	while (i < ((a / 2) - 2))
	{
		cla = next_min_num_algo(sta, cla, a);
		i++;
	}
	return (cla);
}

int	min_num_finder_algo(t_list	**sta, int a)
{
	t_list	*temp;
	int		min;

	temp = *sta;
	min = (int)temp->content;
	temp = temp->next;
	while (a-- != 0)
	{
		if ((int)temp->content < min)
			min = (int)temp->content;
		temp = temp->next;
	}
	return (min);
}

int	next_min_num_algo(t_list	**sta, int min, int a)
{
	t_list	*temp;
	int		n;

	temp = *sta;
	n = max_num_finder_algo(sta, a);
	while (a-- != 0)
	{
		if ((int)temp->content < n && (int)temp->content > min)
			n = (int)temp->content;
		temp = temp->next;
	}
	return (n);
}

int	nums_until_min(t_list	**sta, int a)
{
	t_list	*temp;
	int		c;

	temp = *sta;
	c = 0;
	while (temp)
	{
		if (temp->content == a)
			break ;
		temp = temp->next;
		c++;
	}
	return (c);
}

int	max_num_finder_algo(t_list	**sta, int a)
{
	t_list	*temp;
	int		max;

	temp = *sta;
	max = (int)temp->content;
	temp = temp->next;
	while (a-- != 0)
	{
		if ((int)temp->content > max)
			max = (int)temp->content;
		temp = temp->next;
	}
	return (max);
}
60 12 36 78 100 48 18 53 29 67 28 31 38 14 74 33 61 11 30 71 80 26 34 23 58 9 8 83 72 50 66 82 6 5 27 77 37 90 2 86 20 65 1 75 84 76 85 52 93 79 73 57 10 94 39 54 13 88 70 95 89 63 41 56 69 3 81 46 19 62 35 15 32 96 92 97 91 44 21 49 45 7 98 42 16 68 55 17 51 64 4 87 59 24 47 25 22 43 99 40

temp2 = *sta;
				while (temp2->next != NULL)
					temp2 = temp2->next;
				if (temp->content == next_min_num(sta, temp2->content))
					psw_ra(sta, result);
				else

void	algorithm_of_the_mandangon(t_list **sta, t_list **stb, t_list **result)
{
	t_list	*temp;
	int		current;
	int		i;
	int		cla;
	int		a;

	temp = *sta;
	a = 9;
	while (ft_lstsize(temp) > 9)
	{
		cla = cla_finder(sta, a);
		i = 0;
		temp = *sta;
		while (i < 8)
		{
			temp = *sta;
			current = current_finder(sta, cla);
			while ((int)temp->content != current)
			{
				if (r_or_rr(sta, current))
					psw_rra(sta, result);
				else
					psw_ra(sta, result);
				temp = *sta;
			}
			temp = *stb;
			if ((ft_lstsize(temp) == 0) || (ft_lstsize(temp) == 1))
				psw_pb(sta, stb, result);
			else if (ft_lstsize(temp) == 2)
			{
				psw_pb(sta, stb, result);
				i_case_3(stb, result);
			}
			else
				case_b(sta, stb, current, result);
			temp = *sta;
			i++;
		}
	temp = *sta;
	}
	temp = *sta;
	while (ft_lstsize(temp) != 0)
	{
		temp = *sta;
		current = (int)temp->content;
		case_b(sta, stb, current, result);
		temp = *sta;
	}
	all_b_to_a(sta, stb, result);
}

void	rrr_adv(t_list **sta, t_list **stb, t_list **result, t_push *push)
{
	t_list	*temp;
	int		i;
	int		mov;

	temp = *stb;
	i = 1;
	push->rrr_size = ft_lstsize(stb);
	push->rrr_min = min_num_finder(stb);
	while ((i++) && (int)temp->content != push->rrr_min)
		temp = temp->next;
	mov = push->rrr_size - i + 1;
	printf ("MOV = %i\n", mov);
	if (mov > push->c)
		while (push->c-- != 0)
			psw_rra(sta, result);
	else if (mov == push->c)
		while (push->c-- != 0)
			psw_rrr(sta, stb, result);
	else if (mov < push->c)
	{
		push->c = push->c - mov;
		while (mov-- != 0)
			psw_rrr(sta, stb, result);
		while (push->c-- != 0)
			psw_rra(sta, result);
	}
}

void	rrr_adv(t_list **sta, t_list **stb, t_list **result, t_push *push)
{
	t_list	*temp;
	int		min;
	int		size;
	int		i;
	int		mov;

	temp = *stb;
	i = 1;
	size = ft_lstsize(temp);
	min = min_num_finder(stb);
	while ((int)temp->content != min)
	{
		temp = temp->next;
		i++;
	}
	mov = size - i + 1;
	printf ("MOV = %i\n", mov);
	if (mov > push->c)
		while (push->c-- != 0)
			psw_rra(sta, result);
	else if (mov == push->c)
		while (push->c-- != 0)
			psw_rrr(sta, stb, result);
	else if (mov < push->c)
	{
		push->c = push->c - mov;
		while (mov-- != 0)
			psw_rrr(sta, stb, result);
		while (push->c-- != 0)
			psw_rra(sta, result);
	}
}

void	b_to_a_orden(t_list **sta, t_list **stb, t_list **result)
{
	t_list	*temp;
	int		current;
	int		aux;

	temp = *stb;
	aux = (ft_lstsize(temp));
	while (ft_lstsize(temp) != 0)
	{
		current = max_num_finder(stb);
		while ((int)temp->content != current)
		{
			temp = *stb;
			if ((int)temp->content == min_num_finder(stb))
				aux = b_to_a_ord_ut(sta, stb, result, aux);
			temp = *stb;
			if (ft_lstsize(temp) == 1)
			{
				aux = b_to_a_ord_ut(sta, stb, result, aux);
				break ;
			}
			temp = *stb;
			if ((r_or_rr(stb, current) && (ft_lstsize(temp) != 0)))
				psw_rrb(stb, result);
			else if ((!r_or_rr(stb, current) && (ft_lstsize(temp) != 0)))
				psw_rb(stb, result);
			temp = *stb;
		}
		psw_pa(sta, stb, result);
		temp = *stb;
	}
	while (aux-- != 0)
		psw_ra(sta, result);
}

int	b_to_a_ord_ut(t_list **sta, t_list **stb, t_list **result, int aux)
{
	psw_pa(sta, stb, result);
	psw_ra(sta, result);
	aux--;
}



void	b_to_a_orden(t_list **sta, t_list **stb, t_list **result, t_push *push)
{
	t_list	*temp;
	int		aux;

	temp = *stb;
	aux = (ft_lstsize(temp));
	while (ft_lstsize(temp) != 0)
	{
		push->ord_cu = max_num_finder(stb);
		while ((int)temp->content != push->ord_cu)
		{
			temp = *stb;
			if ((int)temp->content == min_num_finder(stb))
				aux = b_to_a_ord_ut(sta, stb, result, aux);
			temp = *stb;
			if (ft_lstsize(temp) == 1)
			{
				aux = b_to_a_ord_ut(sta, stb, result, aux);
				break ;
			}
			temp = *stb;
			if ((r_or_rr(stb, push->ord_cu) && (ft_lstsize(temp) != 0)))
				psw_rrb(stb, result);
			else if ((!r_or_rr(stb, push->ord_cu) && (ft_lstsize(temp) != 0)))
				psw_rb(stb, result);
			temp = *stb;
		}
		psw_pa(sta, stb, result);
		temp = *stb;
	}
	while (aux-- != 0)
		psw_ra(sta, result);
}
