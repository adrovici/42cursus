	printf ("STACK 1 = %i\n", push->stack1);
	printf ("STACK 2 = %i\n", push->stack2);
	printf ("STACK 3 = %i\n", push->stack3);
	printf ("STACK 4 = %i\n", push->stack4);
	printf ("STACK 5 = %i\n", push->stack5);
	printf ("STACK 6 = %i\n", push->stack6);
	printf ("STACK 7 = %i\n", push->stack7);
	printf ("STACK MAX = %i\n", push->max);
	printf ("STACK MIN = %i\n", push->min);

	printf ("AUX_AUX 1 = %i\n", aux_aux);

int	b_to_a_splitter(t_list **sta, t_list **stb, t_list **result, int aux_aux)
{
	t_list	*tempb;
	int		cla;
	int		mid;

	tempb = *stb;
	aux_aux = 0;
	mid = (ft_lstsize(tempb) / 2);
	cla = cla_mid_finder(stb, ft_lstsize(tempb));
	while (ft_lstsize(tempb) > mid)
	{
		tempb = *stb;
		if ((int)tempb->content == min_num_finder(stb))
		{
			psw_pa(sta, stb, result);
			psw_ra(sta, result);
			aux_aux++;
		}
		if ((int)tempb->content > cla)
			psw_pa(sta, stb, result);
		else
			psw_rb(stb, result);
		tempb = *stb;
	}
	return (aux_aux);
}

int	cla_mid_finder(t_list	**sta, int a)
{
	t_list	*temp;
	int		i;
	int		min;
	int		cla;

	i = 0;
	min = min_num_finder(sta);
	cla = next_min_num(sta, min);
	while (i < ((a / 2) - 2))
	{
		cla = next_min_num(sta, cla);
		i++;
	}
	return (cla);
}

int	cla_next_finder(t_list	**sta, int a)
{
	t_list	*temp;
	int		i;
	int		min;
	int		cla;

	i = 0;
	min = min_num_finder_algo(sta, a);
	cla = next_min_num_algo(sta, min, a);
	while (i < ((a / 2) - 2))
	{
		cla = next_min_num_algo(sta, cla, a);
		i++;
	}
	return (cla);
}

int	min_num_finder_algo(t_list	**sta, int a)
{
	t_list	*temp;
	int		min;

	temp = *sta;
	min = (int)temp->content;
	temp = temp->next;
	while (a-- != 0)
	{
		if ((int)temp->content < min)
			min = (int)temp->content;
		temp = temp->next;
	}
	return (min);
}

int	next_min_num_algo(t_list	**sta, int min, int a)
{
	t_list	*temp;
	int		n;

	temp = *sta;
	n = max_num_finder_algo(sta, a);
	while (a-- != 0)
	{
		if ((int)temp->content < n && (int)temp->content > min)
			n = (int)temp->content;
		temp = temp->next;
	}
	return (n);
}

int	nums_until_min(t_list	**sta, int a)
{
	t_list	*temp;
	int		c;

	temp = *sta;
	c = 0;
	while (temp)
	{
		if (temp->content == a)
			break ;
		temp = temp->next;
		c++;
	}
	return (c);
}

int	max_num_finder_algo(t_list	**sta, int a)
{
	t_list	*temp;
	int		max;

	temp = *sta;
	max = (int)temp->content;
	temp = temp->next;
	while (a-- != 0)
	{
		if ((int)temp->content > max)
			max = (int)temp->content;
		temp = temp->next;
	}
	return (max);
}